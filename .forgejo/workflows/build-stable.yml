name: Build stable images

on:
  workflow_dispatch:
    inputs:
      date:
        description: 'Date tag of Core in format YYYYMMDD. Can be `latest`'
        required: true
        type: string
        default: 'latest'
      git-tag:
        description: 'Git tag of release. Can be `latest`'
        required: true
        type: string
        default: 'latest'

env:
  LOCAL_BUILD_NAME: localhost/onyx
  LOCAL_BUILD_NAME_NV: localhost/onyx-nvidia
  REGISTRY: altlinux.space

jobs:
  check-tag-and-date:
    name: Check inputs
    runs-on: alt-sisyphus
    container:
      image: altlinux.space/actions/runner/containers:sisyphus
    steps:
      - name: Get date
        id: date
        run: |
          DATE=${{ github.event.inputs.date }}
          if [[ "$DATE" == "latest" ]]; then
            echo "::set-output name=date::$(date +%Y%m%d)"
          else
            echo "::set-output name=date::$DATE"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: target_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          if [[ "${{ github.event.inputs.date }}" == "latest" ]]; then
            echo "::set-output name=tag::$LATEST_TAG"
          else
            echo "::set-output name=date::${{ github.event.inputs.date }}"
          fi

      - name: Check if tag exists in repository
        run: |
          if [[ "${{ steps.target_tag.outputs.tag }}" != "latest" ]]; then
            git fetch --tags
            if git show-ref --tags "refs/tags/${{ steps.target_tag.outputs.tag }}"; then
              exit 0
            else
              echo "Tag does not exist in repository"
              exit 1
            fi
          fi
          
      - name: Check Docker image existence
        run: |
          if [[ "${{ steps.date.outputs.date }}" != "latest" ]]; then
            if podman pull altlinux.space/alt-atomic/core/stable:${{ steps.date.outputs.date }}; then
              exit 0
            else
              echo "Image does not exist"
              exit 1
            fi
          fi

  build:
    name: Build image
    runs-on: alt-sisyphus
    needs: check-tag-and-date
    container:
      image: altlinux.space/actions/runner/containers:sisyphus
    steps:
      - name: Get date
        id: date
        run: |
          DATE=${{ github.event.inputs.date }}
          if [[ "$DATE" == "latest" ]]; then
            echo "::set-output name=date::$(date +%Y%m%d)"
          else
            echo "::set-output name=date::$DATE"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: target_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          if [[ "${{ github.event.inputs.date }}" == "latest" ]]; then
            echo "::set-output name=tag::$LATEST_TAG"
          else
            echo "::set-output name=date::${{ github.event.inputs.date }}"
          fi

      - name: Checkout target tag
        run: |
          git fetch --all --tags --force
          git checkout ${{ steps.target_tag.outputs.tag }}

      - name: Login to registry
        run: |
          podman login --username="<token>" --password=${{ secrets.REGISTRY_TOKEN }} $REGISTRY

      - name: Build sisyphus default image
        run: |
          podman build \
            --tag $LOCAL_BUILD_NAME \
            --platform linux/amd64 \
            --build-arg BUILD_TYPE=default \
            --build-arg IMAGE=$REGISTRY/alt-atomic/core/stable:${{ steps.date.outputs.date }} \
            --build-arg IMAGE_TYPE=stable \
            --file ./container-files/main \
            .

      - name: Build sisyphus NVIDIA image
        run: |
          podman build \
            --tag $LOCAL_BUILD_NAME_NV \
            --platform linux/amd64 \
            --build-arg BUILD_TYPE=nvidia \
            --build-arg IMAGE=$LOCAL_BUILD_NAME \
            --build-arg IMAGE_TYPE=stable \
            --file ./container-files/main-nvidia \
            .

      - name: Push images
        run: |
          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME $REGISTRY/$GITHUB_REPOSITORY/stable:${{ steps.date.outputs.date }}
          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME $REGISTRY/$GITHUB_REPOSITORY/stable:latest

          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME_NV $REGISTRY/$GITHUB_REPOSITORY-nvidia/stable:${{ steps.date.outputs.date }}
          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME_NV $REGISTRY/$GITHUB_REPOSITORY-nvidia/stable:latest
