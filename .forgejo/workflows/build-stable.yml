name: Build Base images

on:
  workflow_dispatch:
    inputs:
      date:
        description: 'Date tag of Core in format YYYYMMDD. Can be `latest`'
        required: true
        type: string
        default: latest
  # Also schedule but from core image trigger

env:
  LOCAL_BUILD_NAME: localhost/build
  LOCAL_BUILD_NAME_NV: localhost/build-nv
  REGISTRY: altlinux.space

jobs:
  check-core-image:
    name: Check Core image exists
    runs-on: alt-sisyphus
    outputs:
      core_exists: ${{ steps.check-core-image.outputs.exists }}
    container:
      image: altlinux.space/actions/runner/containers:sisyphus
    steps:
      - name: Get date
        id: date
        run: |
          DATE=${{ github.event.inputs.date }}
          echo "Input date: $DATE"
          if [[ -z "$DATE" || "$DATE" == "latest" ]]; then
            echo "::set-output name=date::$(date +%Y%m%d)"
          else
            echo "::set-output name=date::$DATE"
          fi

      - name: Check Core image exists
        id: check-core-image
        run: |
          if podman pull "$REGISTRY/alt-atomic/core/nightly:${{ steps.date.outputs.date }}" >/dev/null 2>&1; then
            echo "::set-output name=exists::Yes"
          else
            echo "::set-output name=exists::No"
          fi

      - name: Trigger Core rebuild
        if: steps.check-core-image.outputs.exists == 'No'
        uses: actions/forgejo-script@v1
        with:
          github-token: ${{ secrets.REBUILD }}
          script: |
            await forgejo.repos.dispatchWorkflow(
              "alt-atomic",
              "core",
              "build-nightly.yml", 
              {
                ref: "main",
                date: "${{ steps.date.outputs.date }}",
                latest: false,
              },
            );

  build:
    name: Build image
    runs-on: alt-sisyphus
    if: needs.check-core-image.outputs.core_exists == 'Yes'
    needs: check-core-image
    container:
      image: altlinux.space/actions/runner/containers:sisyphus
    steps:
      - name: Get date
        id: date
        run: |
          DATE=${{ github.event.inputs.date }}
          if [[ "$DATE" == "latest" ]]; then
            echo "::set-output name=date::$(date +%Y%m%d)"
          else
            echo "::set-output name=date::$DATE"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to registry
        if: github.event_name != 'pull_request'
        run: |
          podman login --username="<token>" --password=${{ secrets.REGISTRY_TOKEN }} $REGISTRY

      - name: Build sisyphus default image
        run: |
          podman build --tag $LOCAL_BUILD_NAME --platform linux/amd64 --build-arg BUILD_TYPE=default --build-arg IMAGE=$REGISTRY/alt-atomic/core/stable:${{ steps.date.outputs.date }} .

      - name: Build sisyphus NVIDIA image
        run: |
          podman build --tag $LOCAL_BUILD_NAME_NV --platform linux/amd64 -f Containerfile.nv --build-arg BUILD_TYPE=nvidia --build-arg IMAGE=$LOCAL_BUILD_NAME --build-arg IMAGE_TYPE=stable .

      - name: Push images
        if: github.event_name != 'pull_request'
        run: |
          # For onyx:stable, legacy compatobility
          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME $REGISTRY/alt-atomic/onyx:stable

          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME $REGISTRY/$GITHUB_REPOSITORY/stable:${{ steps.date.outputs.date }}
          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME $REGISTRY/$GITHUB_REPOSITORY/stable:latest


          # For onyx:stable-nv, legacy compatobility
          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME_NV $REGISTRY/alt-atomic/onyx:stable-nv

          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME_NV $REGISTRY/$GITHUB_REPOSITORY-nvidia/stable:${{ steps.date.outputs.date }}
          podman push --compression-format zstd --compress $LOCAL_BUILD_NAME_NV $REGISTRY/$GITHUB_REPOSITORY-nvidia/stable:latest
